{"version":3,"sources":["resources/shader.js"],"names":["onGlslError","message","errors","warnings","error","replace","m","l","v","t","li","Number","encodeURI","JSON","stringify","window","command","push","output","join","document","getElementById","innerHTML","onload","fragment","vertex","w","Math","ceil","innerWidth","h","innerHeight","canvas","width","height","glsl","GlslCanvas","onResize","p","on","trim","length","load","textures","setUniform","addEventListener"],"mappings":"CAEC,WACG,aAsCA,SAASA,EAAYC,GAEjB,IAAIC,KACAC,KACJF,EAAQG,MAAMC,QAAQ,qCAAsC,SAAUC,EAAGC,EAAGC,EAAGC,GAC3E,IAAIC,EAAK,gDAAkDC,OAAOJ,GAAK,WAAaK,UAAU,sCAAwCC,KAAKC,WAAWC,OAAOC,QAASL,OAAOJ,MAAQ,mCAAqCI,OAAOJ,GAAK,sCAAwCC,EAAI,KAAOA,EAAI,qCAAuCC,EAAI,KAAOA,EAAI,mBAEnV,OADAP,EAAOe,KAAKP,GACLA,IAEXT,EAAQG,MAAMC,QAAQ,iDAAkD,SAAUC,EAAGC,EAAGC,EAAGC,GACvF,IAAIC,EAAK,kDAAoDC,OAAOJ,GAAK,WAAaK,UAAU,sCAAwCC,KAAKC,WAAWC,OAAOC,QAASL,OAAOJ,MAAQ,kCAAoCI,OAAOJ,GAAK,qCAAuCE,EAAI,KAAOA,EAAI,mBAE7R,OADAN,EAASc,KAAKP,GACPA,IAGX,IAAIQ,EAAS,gDACbA,GAAUhB,EAAOiB,KAAK,MACtBD,GAAUf,EAASgB,KAAK,MACxBD,GAAU,cACVE,SAASC,eAAe,WAAWC,UAAYJ,EA4BnDH,OAAOQ,OAnFP,WACI,IAAIC,EAAWJ,SAASC,eAAe,YAAYC,UAC/CG,EAASL,SAASC,eAAe,UAAUC,UAE3CI,EAAuC,EAAnCC,KAAKC,KAAKb,OAAOc,WAAa,GAClCC,EAAwC,EAApCH,KAAKC,KAAKb,OAAOgB,YAAc,GAEnCC,EAASZ,SAASC,eAAe,UACrCW,EAAOC,MAAQP,EACfM,EAAOE,OAASJ,EAEhB,IAAIK,EAAO,IAAIC,WAAWJ,GAE1B,SAASK,IACL,IAAIX,EAAuC,EAAnCC,KAAKC,KAAKb,OAAOc,WAAa,GAClCC,EAAwC,EAApCH,KAAKC,KAAKb,OAAOgB,YAAc,GASvC,IAAK,IAAIO,KARTN,EAAOC,MAAQP,EACfM,EAAOE,OAASJ,EAChBK,EAAKI,GAAG,QAASvC,GACbyB,EAAOe,OAAOC,OAAS,EACvBN,EAAKO,KAAKlB,EAAUC,GACbD,GACPW,EAAKO,KAAKlB,GAEAT,OAAO4B,SACjBR,EAAKS,WAAW,aAAeN,EAAGvB,OAAO4B,SAASL,IAK1DvB,OAAO8B,iBAAiB,SAAUR,GAClCA,KAlCR","file":"shader.min.js","sourcesContent":["/* global window, document, console, GlslCanvas */\n\n(function () {\n    'use strict';\n\n    function onLoad() {\n        var fragment = document.getElementById('fragment').innerHTML;\n        var vertex = document.getElementById('vertex').innerHTML;\n\n        var w = Math.ceil(window.innerWidth / 2) * 2.0;\n        var h = Math.ceil(window.innerHeight / 2) * 2.0;\n\n        var canvas = document.getElementById('shader');\n        canvas.width = w;\n        canvas.height = h;\n\n        var glsl = new GlslCanvas(canvas);\n\n        function onResize() {\n            var w = Math.ceil(window.innerWidth / 2) * 2.0;\n            var h = Math.ceil(window.innerHeight / 2) * 2.0;\n            canvas.width = w;\n            canvas.height = h;\n            glsl.on('error', onGlslError);\n            if (vertex.trim().length > 0) {\n                glsl.load(fragment, vertex);\n            } else if (fragment) {\n                glsl.load(fragment);\n            }\n            for (var p in window.textures) {\n                glsl.setUniform('u_texture_' + p, window.textures[p]);\n            }\n            // console.log('onResize');\n        }\n\n        window.addEventListener('resize', onResize);\n        onResize();\n        // console.log('canvas', canvas);\n        // console.log('glsl', glsl);\n    }\n\n    function onGlslError(message) {\n        // console.log('onGlslError.error', message.error);\n        var errors = [],\n            warnings = [];\n        message.error.replace(/ERROR: \\d+:(\\d+): \\'(.+)\\' : (.+)/g, function (m, l, v, t) {\n            var li = '<li><a class=\"error\" unselectable data-line=\"' + Number(l) + '\" href=\"' + encodeURI('command:glsl-canvas.revealGlslLine?' + JSON.stringify([window.command, Number(l)])) + '\"><span class=\"line\">ERROR line ' + Number(l) + '</span> <span class=\"value\" title=\"' + v + '\">' + v + '</span> <span class=\"text\" title=\"' + t + '\">' + t + '</span></a></li>';\n            errors.push(li);\n            return li;\n        });\n        message.error.replace(/WARNING: \\d+:(\\d+): \\'(.*\\n*|.*|\\n*)\\' : (.+)/g, function (m, l, v, t) {\n            var li = '<li><a class=\"warning\" unselectable data-line=\"' + Number(l) + '\" href=\"' + encodeURI('command:glsl-canvas.revealGlslLine?' + JSON.stringify([window.command, Number(l)])) + '\"><span class=\"line\">WARN line ' + Number(l) + '</span> <span class=\"text\" title=\"' + t + '\">' + t + '</span></a></li>';\n            warnings.push(li);\n            return li;\n        });\n\n        var output = '<div id=\"error\"><h4>glslCanvas error</h4><ul>';\n        output += errors.join('\\n');\n        output += warnings.join('\\n');\n        output += '</ul></div>';\n        document.getElementById('content').innerHTML = output;\n        /*\n        var lines = document.querySelectorAll('[data-line]');\n        for (var i = 0; i < lines.length; i++) {\n            var line = lines[i];\n            var l = Number(line.getAttribute('data-line'));\n            // console.log('register line', l);\n            line.addEventListener('click', onClick);\n        }\n        */\n    }\n\n    /*\n    function onClick(e) {\n        var line = e.currentTarget;\n        var l = Number(line.getAttribute('data-line'));\n        // console.log('click line', l, window);\n    }\n    */\n\n    /*\n    function onConsoleError() {\n        console.log('onConsoleError', arguments);\n    }\n\n    console.error = onConsoleError;\n    */\n\n    window.onload = onLoad;\n\n}());"]}