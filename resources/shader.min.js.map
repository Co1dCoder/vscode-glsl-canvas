{"version":3,"sources":["resources/shader.js"],"names":["onLoad","onResize","w","Math","ceil","window","innerWidth","h","innerHeight","canvas","style","width","height","glsl","on","onGlslError","vertex","trim","length","load","fragment","p","textures","setUniform","document","getElementById","innerHTML","GlslCanvas","addEventListener","message","errors","warnings","error","replace","m","l","v","t","li","Number","encodeURI","JSON","stringify","command","push","output","join","onload"],"mappings":"CAEC,WACG,YAEA,SAASA,KAeL,QAASC,KACL,GAAIC,GAAuC,EAAnCC,KAAKC,KAAKC,OAAOC,WAAa,GAClCC,EAAwC,EAApCJ,KAAKC,KAAKC,OAAOG,YAAc,EACvCC,GAAOC,MAAMC,MAAQT,EAAI,KACzBO,EAAOC,MAAME,OAASL,EAAI,KAC1BE,EAAOE,MAAQT,EACfO,EAAOG,OAASL,EAChBM,EAAKC,GAAG,QAASC,GACbC,EAAOC,OAAOC,OAAS,EACvBL,EAAKM,KAAKC,EAAUJ,GACbI,GACPP,EAAKM,KAAKC,EAEd,KAAK,GAAIC,KAAKhB,QAAOiB,SACjBT,EAAKU,WAAW,aAAeF,EAAGhB,OAAOiB,SAASD,IA5B1D,GAAID,GAAWI,SAASC,eAAe,YAAYC,UAC/CV,EAASQ,SAASC,eAAe,UAAUC,UAE3CxB,EAAuC,EAAnCC,KAAKC,KAAKC,OAAOC,WAAa,GAClCC,EAAwC,EAApCJ,KAAKC,KAAKC,OAAOG,YAAc,GAEnCC,EAASe,SAASC,eAAe,SACrChB,GAAOC,MAAMC,MAAQ,QACrBF,EAAOC,MAAME,OAAS,QACtBH,EAAOE,MAAQT,EACfO,EAAOG,OAASL,CAEhB,IAAIM,GAAO,GAAIc,YAAWlB,EAqB1BJ,QAAOuB,iBAAiB,SAAU3B,GAClCA,IAKJ,QAASc,GAAYc,GAEjB,GAAIC,MACAC,IACJF,GAAQG,MAAMC,QAAQ,qCAAsC,SAAUC,EAAGC,EAAGC,EAAGC,GAC3E,GAAIC,GAAK,mCAAqCC,OAAOJ,GAAK,WAAaK,UAAU,oCAAsCC,KAAKC,WAAWrC,OAAOsC,QAASJ,OAAOJ,MAAQ,mCAAqCI,OAAOJ,GAAK,sCAAwCC,EAAI,KAAOA,EAAI,qCAAuCC,EAAI,KAAOA,EAAI,kBAEpU,OADAP,GAAOc,KAAKN,GACLA,IAEXT,EAAQG,MAAMC,QAAQ,iDAAkD,SAAUC,EAAGC,EAAGC,EAAGC,GACvF,GAAIC,GAAK,qCAAuCC,OAAOJ,GAAK,WAAaK,UAAU,oCAAsCC,KAAKC,WAAWrC,OAAOsC,QAASJ,OAAOJ,MAAQ,kCAAoCI,OAAOJ,GAAK,qCAAuCE,EAAI,KAAOA,EAAI,kBAE9Q,OADAN,GAASa,KAAKN,GACPA,GAGX,IAAIO,GAAS,+CACbA,IAAUf,EAAOgB,KAAK,MACtBD,GAAUd,EAASe,KAAK,MACxBD,GAAU,cACVrB,SAASC,eAAe,WAAWC,UAAYmB,EA4BnDxC,OAAO0C,OAAS/C","file":"resources/shader.min.js","sourcesContent":["/* global window, document, console, GlslCanvas */\n\n(function () {\n    'use strict';\n\n    function onLoad() {\n        var fragment = document.getElementById('fragment').innerHTML;\n        var vertex = document.getElementById('vertex').innerHTML;\n\n        var w = Math.ceil(window.innerWidth / 2) * 2.0;\n        var h = Math.ceil(window.innerHeight / 2) * 2.0;\n\n        var canvas = document.getElementById('shader');\n        canvas.style.width = '100vw';\n        canvas.style.height = '100vh';\n        canvas.width = w;\n        canvas.height = h;\n\n        var glsl = new GlslCanvas(canvas);\n\n        function onResize() {\n            var w = Math.ceil(window.innerWidth / 2) * 2.0;\n            var h = Math.ceil(window.innerHeight / 2) * 2.0;\n            canvas.style.width = w + 'px';\n            canvas.style.height = h + 'px';\n            canvas.width = w;\n            canvas.height = h;\n            glsl.on('error', onGlslError);\n            if (vertex.trim().length > 0) {\n                glsl.load(fragment, vertex);\n            } else if (fragment) {\n                glsl.load(fragment);\n            }\n            for (var p in window.textures) {\n                glsl.setUniform('u_texture_' + p, window.textures[p]);\n            }\n            // console.log('onResize');\n        }\n\n        window.addEventListener('resize', onResize);\n        onResize();\n        // console.log('canvas', canvas);\n        // console.log('glsl', glsl);\n    }\n\n    function onGlslError(message) {\n        // console.log('onGlslError.error', message.error);\n        var errors = [],\n            warnings = [];\n        message.error.replace(/ERROR: \\d+:(\\d+): \\'(.+)\\' : (.+)/g, function (m, l, v, t) {\n            var li = '<li><a class=\"error\" data-line=\"' + Number(l) + '\" href=\"' + encodeURI('command:extension.revealGlslLine?' + JSON.stringify([window.command, Number(l)])) + '\"><span class=\"line\">ERROR line ' + Number(l) + '</span> <span class=\"value\" title=\"' + v + '\">' + v + '</span> <span class=\"text\" title=\"' + t + '\">' + t + '</span></a></li>';\n            errors.push(li);\n            return li;\n        });\n        message.error.replace(/WARNING: \\d+:(\\d+): \\'(.*\\n*|.*|\\n*)\\' : (.+)/g, function (m, l, v, t) {\n            var li = '<li><a class=\"warning\" data-line=\"' + Number(l) + '\" href=\"' + encodeURI('command:extension.revealGlslLine?' + JSON.stringify([window.command, Number(l)])) + '\"><span class=\"line\">WARN line ' + Number(l) + '</span> <span class=\"text\" title=\"' + t + '\">' + t + '</span></a></li>';\n            warnings.push(li);\n            return li;\n        });\n\n        var output = '<div id=\"error\"><h4>glslCanvas error</h4><ul>';\n        output += errors.join('\\n');\n        output += warnings.join('\\n');\n        output += '</ul></div>';\n        document.getElementById('content').innerHTML = output;\n        /*\n        var lines = document.querySelectorAll('[data-line]');\n        for (var i = 0; i < lines.length; i++) {\n            var line = lines[i];\n            var l = Number(line.getAttribute('data-line'));\n            // console.log('register line', l);\n            line.addEventListener('click', onClick);\n        }\n        */\n    }\n\n    /*\n    function onClick(e) {\n        var line = e.currentTarget;\n        var l = Number(line.getAttribute('data-line'));\n        // console.log('click line', l, window);\n    }\n    */\n\n    /*\n    function onConsoleError() {\n        console.log('onConsoleError', arguments);\n    }\n\n    console.error = onConsoleError;\n    */\n\n    window.onload = onLoad;\n\n}());"],"sourceRoot":"/source/"}