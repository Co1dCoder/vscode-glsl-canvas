{"version":3,"sources":["resources/shader.js"],"names":["onLoad","onResize","w","Math","ceil","window","innerWidth","h","innerHeight","canvas","style","width","height","glsl","on","onGlslError","vertex","load","fragment","console","log","document","getElementById","innerHTML","GlslCanvas","addEventListener","message","error","errors","warnings","replace","m","l","v","t","li","Number","push","output","join","body","onload"],"mappings":"CAEC,WACG,YAEA,SAASA,KAgBL,QAASC,KACL,GAAIC,GAAuC,EAAnCC,KAAKC,KAAKC,OAAOC,WAAa,GAClCC,EAAwC,EAApCJ,KAAKC,KAAKC,OAAOG,YAAc,EAEvCC,GAAOC,MAAMC,MAAQT,EAAI,KACzBO,EAAOC,MAAME,OAASL,EAAI,KAC1BE,EAAOE,MAAQT,EACfO,EAAOG,OAASL,EAEhBM,EAAKC,GAAG,QAASC,GAEbC,EACAH,EAAKI,KAAKC,EAAUF,GACbE,GACPL,EAAKI,KAAKC,GAWdC,QAAQC,IAAI,YAxChB,GAAIF,GAAWG,SAASC,eAAe,YAAYC,UAC/CP,EAAS,KAGTd,EAAuC,EAAnCC,KAAKC,KAAKC,OAAOC,WAAa,GAClCC,EAAwC,EAApCJ,KAAKC,KAAKC,OAAOG,YAAc,GAEnCC,EAASY,SAASC,eAAe,SACrCb,GAAOC,MAAMC,MAAQ,QACrBF,EAAOC,MAAME,OAAS,QACtBH,EAAOE,MAAQT,EACfO,EAAOG,OAASL,CAEhB,IAAIM,GAAO,GAAIW,YAAWf,EA8B1BJ,QAAOoB,iBAAiB,SAAUxB,GAClCA,IAEAkB,QAAQC,IAAI,SAAUX,GACtBU,QAAQC,IAAI,OAAQP,GAGxB,QAASE,GAAYW,GACjBP,QAAQC,IAAI,oBAAqBM,EAAQC,MACzC,IAAIC,MACAC,IACJH,GAAQC,MAAMG,QAAQ,qCAAsC,SAAUC,EAAGC,EAAGC,EAAGC,GAC3E,GAAIC,GAAK,mDAAqDC,OAAOJ,GAAK,+BAAiCC,EAAI,8BAAgCC,EAAI,cAEnJ,OADAN,GAAOS,KAAKF,GACLA,IAEXG,GAAUZ,EAAQC,MAAMG,QAAQ,mCAAoC,SAAUC,EAAGC,GAC7E,GAAIG,GAAK,oDAAsDC,OAAOJ,GAAK,8BAAgCE,EAAI,cAE/G,OADAL,GAASQ,KAAKF,GACPA,GAEX,IAAIG,GAAS,gDACbA,IAAUV,EAAOW,KAAK,MACtBD,GAAUT,EAASU,KAAK,MACxBD,GAAU,cACVjB,SAASmB,KAAKjB,UAAYe,EAoB9BjC,OAAOoC,OAASzC","file":"resources/shader.min.js","sourcesContent":["/* global window, document, console, GlslCanvas */\n\n(function () {\n    'use strict';\n\n    function onLoad() {\n        var fragment = document.getElementById('fragment').innerHTML;\n        var vertex = null;\n        var texture = 'https://raw.githubusercontent.com/actarian/plausible-brdf-shader/master/textures/mars/2048x1024/diffuse.jpg';\n\n        var w = Math.ceil(window.innerWidth / 2) * 2.0;\n        var h = Math.ceil(window.innerHeight / 2) * 2.0;\n\n        var canvas = document.getElementById('shader');\n        canvas.style.width = '100vw';\n        canvas.style.height = '100vh';\n        canvas.width = w;\n        canvas.height = h;\n\n        var glsl = new GlslCanvas(canvas);\n\n        function onResize() {\n            var w = Math.ceil(window.innerWidth / 2) * 2.0;\n            var h = Math.ceil(window.innerHeight / 2) * 2.0;\n\n            canvas.style.width = w + 'px';\n            canvas.style.height = h + 'px';\n            canvas.width = w;\n            canvas.height = h;\n\n            glsl.on('error', onGlslError);\n\n            if (vertex) {\n                glsl.load(fragment, vertex);\n            } else if (fragment) {\n                glsl.load(fragment);\n            }\n\n            // glsl.setUniform(\"u_texture\", texture);\n            /*\n            for (let i in textures) {\n                textureScript += `shader.uniforms.iChannel${i} = { type: 't', value: THREE.ImageUtils.loadTexture('${textures[i]}') };`;\n                console.log('texture', textures[i]);\n            }\n            */\n\n            console.log('onResize');\n        }\n\n        window.addEventListener('resize', onResize);\n        onResize();\n\n        console.log('canvas', canvas);\n        console.log('glsl', glsl);\n    }\n\n    function onGlslError(message) {\n        console.log('onGlslError.error', message.error);\n        var errors = [],\n            warnings = [];\n        message.error.replace(/ERROR: \\d+:(\\d+): \\'(.+)\\' : (.+)/g, function (m, l, v, t) {\n            var li = '<li class=\"error\"><span class=\"line\">ERROR line ' + Number(l) + '</span> <span class=\"value\">' + v + '</span> <span class=\"text\">' + t + '</span></li>';\n            errors.push(li);\n            return li;\n        });\n        output += message.error.replace(/WARNING: \\d+:(\\d+): \\'\\' : (.+)/g, function (m, l) {\n            var li = '<li class=\"warning\"><span class=\"line\">WARN line ' + Number(l) + '</span> <span class=\"text\">' + t + '</span></li>';\n            warnings.push(li);\n            return li;\n        });\n        var output = '<div id=\"error\"><h4>glsl shader error</h4><ul>';\n        output += errors.join('\\n');\n        output += warnings.join('\\n');\n        output += '</ul></div>';\n        document.body.innerHTML = output;\n    }\n\n    /*\n    function onConsoleError() {\n        console.log('onConsoleError', arguments);\n        var output = '<div id=\"error\"><h3>Shader failed to compile</h3><ul>';\n        if ('7' in arguments) {\n            output += arguments[7].replace(/ERROR: \\\\d+:(\\\\d+)/g, function (m, c) {\n                return \"<li>Line \" + String(Number(c)) + '</li>';\n            });\n        } else {\n            output += '<li>' + arguments[0] + '</li>';\n        }\n        output += '</ul></div>';\n        document.body.innerHTML = output;\n    }\n    console.error = onConsoleError;\n    */\n\n    window.onload = onLoad;\n\n}());"],"sourceRoot":"/source/"}