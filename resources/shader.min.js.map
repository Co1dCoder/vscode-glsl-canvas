{"version":3,"sources":["resources/shader.js"],"names":["onGlslError","message","options","window","errors","warnings","error","replace","m","l","v","t","li","Number","encodeURI","JSON","stringify","uri","push","output","join","document","getElementById","innerHTML","length","querySelectorAll","click","addEventListener","o","content","canvas","tools","pause","querySelector","record","stats","flags","toggle","onResize","statsdom","glsl","GlslCanvas","load","u","vertex","trim","fragment","uniforms","setUniform","textures","w","offsetWidth","h","offsetHeight","style","width","height","togglePause","console","log","paused","timePause","timePrev","Date","timeLoad","play","setAttribute","on","visibility","Stats","showPanel","dom","cssText","body","appendChild","requestAnimationFrame","statsTick","update","event","parse","data"],"mappings":"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","file":"shader.min.js","sourcesContent":["/* global window, document, console, GlslCanvas */\n\n(function () {\n    'use strict';\n\n    function onLoad() {\n        var o = 1; // important\n\n        var content = document.getElementById('content');\n        var canvas = document.getElementById('shader');\n        var tools = {\n            pause: document.querySelector('#pause'),\n            record: document.querySelector('#record'),\n            stats: document.querySelector('#stats'),\n        };\n        var flags = {\n            toggle: false,\n            record: false,\n            stats: false,\n        };\n\n        onResize();\n\n        var glsl = new GlslCanvas(canvas);\n        glsl.on('error', onGlslError);\n\n        load();\n\n        function load() {\n            var o = window.options;\n            // var fragment = document.getElementById('fragment').innerHTML;\n            // var vertex = document.getElementById('vertex').innerHTML;\n            if (o.vertex.trim().length > 0) {\n                glsl.load(o.fragment, o.vertex);\n            } else if (o.fragment) {\n                glsl.load(o.fragment);\n            }\n            for (var u in o.uniforms) {\n                glsl.setUniform(u, o.uniforms[u]);\n            }\n            for (var t in o.textures) {\n                glsl.setUniform('u_texture_' + t, o.textures[t]);\n            }\n        }\n\n        function onResize() {\n            var w = content.offsetWidth + o;\n            var h = content.offsetHeight + o;\n            canvas.style.width = w + 'px';\n            canvas.style.height = h + 'px';\n            canvas.width = w;\n            canvas.height = h;\n            o = 0;\n        }\n\n        function togglePause() {\n            flags.pause = !flags.pause;\n            console.log('pause', flags.pause);\n            if (glsl.paused) {\n                if (glsl.timePause) {\n                    glsl.timePrev = new Date();\n                    glsl.timeLoad += (glsl.timePrev - glsl.timePause);\n                }\n                glsl.play();\n                tools.pause.querySelector('i').setAttribute('class', 'icon-pause');\n            } else {\n                glsl.pause();\n                glsl.timePause = new Date();\n                tools.pause.querySelector('i').setAttribute('class', 'icon-play');\n            }\n        }\n\n        function toggleRecord() {\n            flags.record = !flags.record;\n            console.log('record', flags.record);\n            if (flags.record) {\n                tools.record.querySelector('i').setAttribute('class', 'icon-stop');\n            } else {\n                tools.record.querySelector('i').setAttribute('class', 'icon-record');\n            }\n        }\n\n        var stats, statsdom;\n\n        function toggleStats() {\n            flags.stats = !flags.stats;\n\n            function statsTick() {\n                stats.update();\n                // stats.begin();\n                // monitored code goes here\n                // stats.end();\n                if (flags.stats) {\n                    requestAnimationFrame(statsTick);\n                }\n                // stats.begin();\n            }\n            if (flags.stats) {\n                if (!statsdom) {\n                    stats = new Stats();\n                    stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n                    statsdom = stats.dom;\n                    statsdom.style.cssText = 'position:fixed;top:0;right:0;cursor:pointer;opacity:0.9;z-index:10000';\n                    document.body.appendChild(stats.dom);\n                } else {\n                    statsdom.style.visibility = 'visible';\n                }\n                requestAnimationFrame(statsTick);\n                tools.stats.setAttribute('class', 'btn active');\n            } else {\n                if (statsdom) {\n                    statsdom.style.visibility = 'hidden';\n                }\n                tools.stats.setAttribute('class', 'btn');\n            }\n        }\n\n        function onMessage(event) {\n            window.options = JSON.parse(event.data);\n            console.log('onMessage', window.options);\n            load();\n            // Assuming you've verified the origin of the received message (which\n            // you must do in any case), a convenient idiom for replying to a\n            // message is to call postMessage on event.source and provide\n            // event.origin as the targetOrigin.\n            // event.source.postMessage(\"hi there yourself!  the secret response \" + \"is: rheeeeet!\", event.origin);\n        }\n\n        tools.pause.addEventListener('mousedown', togglePause);\n        tools.record.addEventListener('mousedown', toggleRecord);\n        tools.stats.addEventListener('mousedown', toggleStats);\n        document.addEventListener(\"dblclick\", togglePause);\n        window.addEventListener(\"message\", onMessage, false);\n        window.addEventListener('resize', onResize);\n        onResize();\n\n        /*\n        // Called sometime after postMessage is called\n        function receiveMessage(event) {\n            // Do we trust the sender of this message?\n            if (event.origin !== \"http://example.com:8080\") {\n                return;\n            }\n            // event.source is window.opener\n            // event.data is \"hello there!\"\n            // Assuming you've verified the origin of the received message (which\n            // you must do in any case), a convenient idiom for replying to a\n            // message is to call postMessage on event.source and provide\n            // event.origin as the targetOrigin.\n            event.source.postMessage(\"hi there yourself!  the secret response \" + \"is: rheeeeet!\", event.origin);\n        }\n        window.addEventListener(\"message\", receiveMessage, false);\n    \n        window.addEventListener('message', (() => {\n            const doScroll = throttle(line => {\n                scrollDisabled = true;\n                scrollToRevealSourceLine(line);\n            }, 50);\n            return event => {\n                const line = +event.data.line;\n                if (!isNaN(line)) {\n                    doScroll(line);\n                }\n            };\n        })(), false);\n        */\n    }\n\n    function onGlslError(message) {\n        // console.log('onGlslError.error', message.error);\n        var options = window.options;\n        var errors = [],\n            warnings = [];\n        message.error.replace(/ERROR: \\d+:(\\d+): \\'(.+)\\' : (.+)/g, function (m, l, v, t) {\n            var message = 'ERROR (' + v + ') ' + t;\n            var li = '<li><a class=\"error\" unselectable data-line=\"' + Number(l) + '\" href=\"' + encodeURI('command:glsl-canvas.revealGlslLine?' + JSON.stringify([options.uri, Number(l), message])) + '\"><span class=\"line\">ERROR line ' + Number(l) + '</span> <span class=\"value\" title=\"' + v + '\">' + v + '</span> <span class=\"text\" title=\"' + t + '\">' + t + '</span></a></li>';\n            errors.push(li);\n            return li;\n        });\n        message.error.replace(/WARNING: \\d+:(\\d+): \\'(.*\\n*|.*|\\n*)\\' : (.+)/g, function (m, l, v, t) {\n            var li = '<li><a class=\"warning\" unselectable data-line=\"' + Number(l) + '\" href=\"' + encodeURI('command:glsl-canvas.revealGlslLine?' + JSON.stringify([options.uri, Number(l), message])) + '\"><span class=\"line\">WARN line ' + Number(l) + '</span> <span class=\"text\" title=\"' + t + '\">' + t + '</span></a></li>';\n            warnings.push(li);\n            return li;\n        });\n        var output = '<div id=\"error\"><h4>glslCanvas error</h4><ul>';\n        output += errors.join('\\n');\n        output += warnings.join('\\n');\n        output += '</ul></div>';\n        document.getElementById('content').innerHTML = output;\n        if (errors.length) {\n            document.querySelectorAll('.error')[0].click();\n        }\n        /*\n        window.parent.postMessage({\n            command: \"did-click-link\",\n            data: createCommandUri('extension.sendMessage', 'hi')\n        }, \"file://\");\n        */\n    }\n\n    /*\n    function onConsoleError() {\n        console.log('onConsoleError', arguments);\n    }\n\n    console.error = onConsoleError;\n    */\n\n    // window.onload = onLoad;\n    window.addEventListener('load', onLoad);\n}());"]}