{"version":3,"sources":["resources/shader.js"],"names":["onLoad","onResize","w","content","offsetWidth","o","h","offsetHeight","canvas","style","width","height","onDown","glsl","paused","timePause","timePrev","Date","timeLoad","play","pause","fragment","document","getElementById","innerHTML","vertex","GlslCanvas","on","onGlslError","trim","length","load","p","window","uniforms","setUniform","textures","addEventListener","message","errors","warnings","error","replace","m","l","v","t","li","Number","encodeURI","JSON","stringify","command","push","output","join"],"mappings":"CAEC,WACG,YAEA,SAASA,KA6BL,QAASC,KACL,GAAIC,GAAIC,EAAQC,YAAcC,EAC1BC,EAAIH,EAAQI,aAAeF,CAC/BG,GAAOC,MAAMC,MAAQR,EAAI,KACzBM,EAAOC,MAAME,OAASL,EAAI,KAC1BE,EAAOE,MAAQR,EACfM,EAAOG,OAASL,EAChBD,EAAI,EAGR,QAASO,KACDC,EAAKC,QACDD,EAAKE,YACLF,EAAKG,SAAW,GAAIC,MACpBJ,EAAKK,UAAaL,EAAKG,SAAWH,EAAKE,WAE3CF,EAAKM,SAELN,EAAKO,QACLP,EAAKE,UAAY,GAAIE,OA/C7B,GAAIZ,GAAI,EAEJgB,EAAWC,SAASC,eAAe,YAAYC,UAC/CC,EAASH,SAASC,eAAe,UAAUC,UAC3CrB,EAAUmB,SAASC,eAAe,WAClCf,EAASc,SAASC,eAAe,SAErCtB,IAEA,IAAIY,GAAO,GAAIa,YAAWlB,EAC1BK,GAAKc,GAAG,QAASC,GAIjB,WACQH,EAAOI,OAAOC,OAAS,EACvBjB,EAAKkB,KAAKV,EAAUI,GACbJ,GACPR,EAAKkB,KAAKV,EAEd,KAAK,GAAIW,KAAKC,QAAOC,SACjBrB,EAAKsB,WAAWH,EAAGC,OAAOC,SAASF,GAEvC,KAAK,GAAIA,KAAKC,QAAOG,SACjBvB,EAAKsB,WAAW,aAAeH,EAAGC,OAAOG,SAASJ,OA2B1DxB,EAAO6B,iBAAiB,YAAazB,GACrCqB,OAAOI,iBAAiB,SAAUpC,GAClCA,IAGJ,QAAS2B,GAAYU,GAEjB,GAAIC,MACAC,IACJF,GAAQG,MAAMC,QAAQ,qCAAsC,SAAUC,EAAGC,EAAGC,EAAGC,GAC3E,GAAIC,GAAK,gDAAkDC,OAAOJ,GAAK,WAAaK,UAAU,sCAAwCC,KAAKC,WAAWlB,OAAOmB,QAASJ,OAAOJ,MAAQ,mCAAqCI,OAAOJ,GAAK,sCAAwCC,EAAI,KAAOA,EAAI,qCAAuCC,EAAI,KAAOA,EAAI,kBAEnV,OADAP,GAAOc,KAAKN,GACLA,IAEXT,EAAQG,MAAMC,QAAQ,iDAAkD,SAAUC,EAAGC,EAAGC,EAAGC,GACvF,GAAIC,GAAK,kDAAoDC,OAAOJ,GAAK,WAAaK,UAAU,sCAAwCC,KAAKC,WAAWlB,OAAOmB,QAASJ,OAAOJ,MAAQ,kCAAoCI,OAAOJ,GAAK,qCAAuCE,EAAI,KAAOA,EAAI,kBAE7R,OADAN,GAASa,KAAKN,GACPA,GAEX,IAAIO,GAAS,+CACbA,IAAUf,EAAOgB,KAAK,MACtBD,GAAUd,EAASe,KAAK,MACxBD,GAAU,cACVhC,SAASC,eAAe,WAAWC,UAAY8B,EAYnDrB,OAAOI,iBAAiB,OAAQrC","file":"resources/shader.min.js","sourcesContent":["/* global window, document, console, GlslCanvas */\n\n(function () {\n    'use strict';\n\n    function onLoad() {\n        var o = 1; // important\n\n        var fragment = document.getElementById('fragment').innerHTML;\n        var vertex = document.getElementById('vertex').innerHTML;\n        var content = document.getElementById('content');\n        var canvas = document.getElementById('shader');\n\n        onResize();\n\n        var glsl = new GlslCanvas(canvas);\n        glsl.on('error', onGlslError);\n\n        load();\n\n        function load() {\n            if (vertex.trim().length > 0) {\n                glsl.load(fragment, vertex);\n            } else if (fragment) {\n                glsl.load(fragment);\n            }\n            for (var p in window.uniforms) {\n                glsl.setUniform(p, window.uniforms[p]);\n            }\n            for (var p in window.textures) {\n                glsl.setUniform('u_texture_' + p, window.textures[p]);\n            }\n        }\n\n        function onResize() {\n            var w = content.offsetWidth + o;\n            var h = content.offsetHeight + o;\n            canvas.style.width = w + 'px';\n            canvas.style.height = h + 'px';\n            canvas.width = w;\n            canvas.height = h;\n            o = 0;\n        }\n\n        function onDown() {\n            if (glsl.paused) {\n                if (glsl.timePause) {\n                    glsl.timePrev = new Date();\n                    glsl.timeLoad += (glsl.timePrev - glsl.timePause);\n                }\n                glsl.play();\n            } else {\n                glsl.pause();\n                glsl.timePause = new Date();\n            }\n        }\n\n        canvas.addEventListener('mousedown', onDown);\n        window.addEventListener('resize', onResize);\n        onResize();\n    }\n\n    function onGlslError(message) {\n        // console.log('onGlslError.error', message.error);\n        var errors = [],\n            warnings = [];\n        message.error.replace(/ERROR: \\d+:(\\d+): \\'(.+)\\' : (.+)/g, function (m, l, v, t) {\n            var li = '<li><a class=\"error\" unselectable data-line=\"' + Number(l) + '\" href=\"' + encodeURI('command:glsl-canvas.revealGlslLine?' + JSON.stringify([window.command, Number(l)])) + '\"><span class=\"line\">ERROR line ' + Number(l) + '</span> <span class=\"value\" title=\"' + v + '\">' + v + '</span> <span class=\"text\" title=\"' + t + '\">' + t + '</span></a></li>';\n            errors.push(li);\n            return li;\n        });\n        message.error.replace(/WARNING: \\d+:(\\d+): \\'(.*\\n*|.*|\\n*)\\' : (.+)/g, function (m, l, v, t) {\n            var li = '<li><a class=\"warning\" unselectable data-line=\"' + Number(l) + '\" href=\"' + encodeURI('command:glsl-canvas.revealGlslLine?' + JSON.stringify([window.command, Number(l)])) + '\"><span class=\"line\">WARN line ' + Number(l) + '</span> <span class=\"text\" title=\"' + t + '\">' + t + '</span></a></li>';\n            warnings.push(li);\n            return li;\n        });\n        var output = '<div id=\"error\"><h4>glslCanvas error</h4><ul>';\n        output += errors.join('\\n');\n        output += warnings.join('\\n');\n        output += '</ul></div>';\n        document.getElementById('content').innerHTML = output;\n    }\n\n    /*\n    function onConsoleError() {\n        console.log('onConsoleError', arguments);\n    }\n\n    console.error = onConsoleError;\n    */\n\n    // window.onload = onLoad;\n    window.addEventListener('load', onLoad);\n\n}());"],"sourceRoot":"/source/"}